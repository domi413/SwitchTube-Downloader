name: CI

on:
  pull_request:
    types:
      - opened
      - ready_for_review
      - reopened
      - synchronize

jobs:
  dictionary:
    runs-on: ubuntu-latest
    name: Check dictionary sorting
    timeout-minutes: 1

    if: ${{ !github.event.pull_request.draft }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check if dictionary is sorted
        run: |
          BOLD_RED="\033[1;31m"
          BOLD_YELLOW="\033[1;33m"
          BOLD_GREEN="\033[1;32m"
          RESET="\033[0m"

          if [ ! -f ".dictionaries/project-words.txt" ]; then
            echo -e "${BOLD_RED}Error: .dictionaries/project-words.txt not found${RESET}"
            exit 1
          fi

          # Check if file is sorted (case-insensitive)
          if sort -cf .dictionaries/project-words.txt; then
            echo -e "${BOLD_GREEN}âœ“ .dictionaries/project-words.txt is properly sorted${RESET}"
          else
            echo -e "${BOLD_RED}Error: .dictionaries/project-words.txt is not sorted alphabetically (case-insensitive)${RESET}"
            echo -e "${BOLD_YELLOW}To fix this, run: sort -f .dictionaries/project-words.txt -o .dictionaries/project-words.txt${RESET}"
            exit 1
          fi
        shell: bash

  spellcheck:
    runs-on: ubuntu-latest
    name: Spellcheck
    timeout-minutes: 1

    if: ${{ !github.event.pull_request.draft }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Starting cspell
        uses: streetsidesoftware/cspell-action@v7
        with:
          files: ""
          root: "."
          check_dot_files: false
          inline: error
          treat_flagged_words_as_errors: false
          suggestions: true
          strict: true
          config: ".cspell.yaml"
          incremental_files_only: ${{ env.ACT != 'true' }}
          verbose: true
          use_cspell_files: false

  test:
    runs-on: ubuntu-latest
    name: Unit tests
    timeout-minutes: 1

    if: ${{ !github.event.pull_request.draft }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: stable

      - name: Run tests with coverage
        run: go test -cover -coverprofile=coverage.txt ./...

      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage
          path: coverage.txt

  coverage:
    runs-on: ubuntu-latest
    name: Code coverage report
    timeout-minutes: 1

    if: ${{ !github.event.pull_request.draft }}

    needs: test
    permissions:
      contents: read
      actions: read
      pull-requests: write

    steps:
      - name: Generate coverage report
        uses: fgrosse/go-coverage-report@v1.1.1
        with:
          coverage-artifact-name: "code-coverage"
          coverage-file-name: "coverage.txt"

  lint:
    strategy:
      matrix:
        go: [stable]
        os: [ubuntu-latest, macos-latest, windows-latest]

    name: Lint
    runs-on: ${{ matrix.os }}
    timeout-minutes: 1
    permissions:
      contents: read
      pull-requests: read

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go }}
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: v2.1
